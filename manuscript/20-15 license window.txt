## User Interface to Enter License Information

![The "Enter a License" window of _New App_.](images/20-050-license-window.png)

With the `LicenseVerifier` service object we can test if license information is valid, and `RegisterApplication` executes the appropriate command. Your application will need to provide a form for the user to provide this information. This section focuses on how to wire UI components to do the job.

First, where do you place the form?

In most apps, I've discovered a "Register APPNAME ..." or "License APPNAME ..." main menu item somewhere. Sometimes it's buried in the Help menu, sometimes it's below the menu item for preferences in the submenu with the app's name. Dockless apps that only add an icon to the menu bar have this, too. It's typically, but not always, located in a contextual menu that opens under the menu bar icon.

You can also have a preference pane. Most apps have some sort of preferences window anyway, so adding a pane dedicated to entering license information can make sense. You can, and I think _should_, combine this with a main menu item, even though the preferences already have a standard menu item. The main menu offers full-text search via the help menu and thus is super accessible. 

To maximize flexibility in case you copy and paste the interface implementation to your app, I decided to roll with a dedicated license window for this book's sample app. You can copy it as is and display it as a dialog window or as a window-modal sheet, or you only take the content view and paste it into a preference view controller.

Creating a window like the one pictured above is very easy in Xcode's Interface Builder, so I won't bore you with the details of adding labels and text fields to a view. 

When you set the interface up, you could, in theory, use Cocoa Bindings to populate the form fields with values from `UserDefaults` directly. I suggest you don't. Changes to the text fields would be stored immediately while you type. That renders the "Register" button useless, because no matter if you press it or not, the text fields's contents are saved immediately. That's weird, to say the least. You could implement validation of live user input, but I cannot imagine a straight-forward solution that doesn't bother the user while they enter their name. Also, you don't want accidental key presses to immediately persist the now invalid license information. I think it's not worth the hassle; don't use Cocoa Bindings here and validate input on button press instead. Only store valid license information via `RegisterApplication`, which we already have implemented.

### Window and event handler architecture

![Class diagram of UI Components and their event handlers](images/20-200-licensewindowcontroller.png)

I tried to both maximize reusability and show useful macOS architectural patterns at the same time here. The basic message is: 

- treat your window controllers and view controllers as view components, and make them as dumb and short as possible,
- separate window controller from sub-view controllers where possible, and
- put your windows in separate Nibs or Storyboards instead of sticking them in the `MainMenu` that comes with the project template.

For pragmatic reasons, it can make sense to not have both a `NSWindowController` and a `NSViewController`. If your window has a single user interface element, then why bother? These heuristics have proven to be useful in the community and during my practice. Apply them and deviate from them with reason.

The `LicenseWindowController` object is the main entry point and created through the Nib. This could nowadays have been a Storyboard just as well. The point is to extract it into its own Interface Builder file: it makes you suffer less when the files get corrupted or Xcode doesn't behave anymore and you need to recreate the UI, and it reduces merge conflicts in team projects. The window controller handles "Buy Now" button presses directly and delegates to a `purchaseEventHandler`, a service that conforms to the `HandlesPurchases` protocol. I didn't extract a `PurchaseViewController` to handle this event because the overhead isn't worth the design purity in my book. We'll have a look at an implementation of the `HandlesPurchases` type later.

An `ExistingLicenseViewController` then actually handles form input events and reacts to the "Register" action. It's owned by `LicenseWindowController`. It delegates license verification through its `HandlesRegistering` protocol to the `RegisterApplication` service that we will make conform to it.

### View controller implementation

We focus on `ExistingLicenseViewController` here to have a closer look at user input handling.

    protocol HandlesRegistering: class {
        func register(name: String, licenseCode: String)
    }

    class ExistingLicenseViewController: NSViewController {
        // MARK: UI Components
        
        @IBOutlet weak var licenseeTextField: NSTextField!
        @IBOutlet weak var licenseCodeTextField: NSTextField!
        @IBOutlet weak var registerButton: NSButton!
    
        // MARK: Action handler
        
        var eventHandler: HandlesRegistering?
    
        @IBAction func register(sender: AnyObject) {
            let name = licenseeTextField.stringValue
            let licenseCode = licenseCodeTextField.stringValue
            eventHandler?.register(name: name, licenseCode: licenseCode)
        }

        // MARK: Display Commands
        
        func displayEmptyForm() {
            licenseeTextField.stringValue = ""
            licenseCodeTextField.stringValue = ""
        }

        func displayLicense(license: License) {
            licenseeTextField.stringValue = license.name
            licenseCodeTextField.stringValue = license.key
        }
    }

This, again, should appear to be a very simple implementation. This is what view controllers ought to do: react to user input, and delegate to other objects for more meaty actions as soon as possible. In your applications, you will find that method after method is added to view controllers over time to implement the various delegate methods already. You don't want to have more in the view controllers than absolutely necessary. 

As a benefit, this kind of approach to programming view controllers makes them easily testable. Have a look at the tests in the sample app code to see how I test the Interface Builder connections and the action-handler's entry points. Here's just a couple:

{lang="swift"}
    class ExistingLicenseViewControllerTests: XCTestCase {
        var controller: ExistingLicenseViewController!
    
        override func setUp() {
            // Load the window controller from its nib ...
            let windowController = LicenseWindowController()
            _ = windowController.window
            // ... and then get the initialized controller:
            controller = windowController.existingLicenseViewController
        }
        
        func testLicenseeTextField_IsConnected() {
            XCTAssertNotNil(controller.licenseeTextField)
        }
    
        func testLicenseCodeTextField_IsConnected() {
            XCTAssertNotNil(controller.licenseCodeTextField)
        }
    
        // ...
    
        func testDisplayEmptyForm_EmptiesTextFields() {
            controller.licenseeTextField.stringValue = "something"
            controller.licenseCodeTextField.stringValue = "something"
            
            controller.displayEmptyForm()
            
            XCTAssertEqual(controller.licenseeTextField.stringValue, "")
            XCTAssertEqual(controller.licenseCodeTextField.stringValue, "")
        }
    
        func testDisplayLicense_FillsLicenseTextFields() {
            let license = License(name: "a name", licenseCode: "a code")
            controller.licenseeTextField.stringValue = ""
            
            controller.display(license: license)
            
            XCTAssertEqual(controller.licenseCodeTextField.stringValue, "a code")
        }
    }

In the last section, you might wonder why we didn't start writing the registration code into the "Register" button's action handler, directly into the view controller. Having seen the implementation of the view controller, this might still be a puzzle. It's because encapsulating this simple piece of logic telegraphs to any reader of your code that this is a cohesive sequence. To put it into a function with a name, or a type, makes the sequence a _thing_. It's not just a concept in your head, but a thing with a name in the realm of your code. All this is the foundation of object-oriented programming, of course: to encapsulate things that belong together in objects and then treat these as cohesive wholes. Here, having a service object at hand makes form field validation a trivial matter. That's nice.


### React to license change events to unlock functionality

You know `RegisterApplication` already. Adding conformance to `HandlesRegistering` is a one-liner because the method signatures match up already.

To have the app do something interesting, I've added sending a notification when the registering succeeds:

{lang="swift"}
    class RegisterApplication: HandlesRegistering {
        // ...

        // Newly added dependency:
        let changeBroadcaster: LicenseChangeBroadcaster
        
        func register(name: String, licenseCode: String) {
            guard let license = licenseFactory.license(
                    name: name, 
                    licenseCode: licenseCode) else {
                displayLicenseCodeError()
                return
            }
            
            licenseWriter.store(license)
            // This call is new:
            changeBroadcaster.broadcast(.registered(license))
        }
        // ...
    }

The broadcaster is a very simple object that wraps a call to `NotificationCenter.post` in `broadcast`:

    class LicenseChangeBroadcaster {
        let notificationCenter: NotificationCenter

        public init(notificationCenter: NotificationCenter = .default) {
            self.notificationCenter = notificationCenter
        }

        public func broadcast(_ licensing: Licensing) {
            notificationCenter.post(
                name: Licensing.licenseChangedNotification,
                object: self,
                userInfo: licensing.userInfo())
        }
    }
    
This makes it easy to write test doubles or mocks to verify the call to `LicenseChangeBroadcaster.broadcast` with the proper `Licensing` object, instead of having to verify that an `NSNotification`s is being passed on, and inspecting what it looks like, including the `userInfo` dictionary. A test double to verify calls of `broadcast` is much simpler to write.

Because the service sends a notification, other components can loosely couple to the success of registering the app. In the sample application, we do not allow using the main application interface until the app is unlocked. `AppDelegate` is the gatekeeper here, but you may subscribe different components separately, and put the main unlock functionality anywhere else. The `AppDelegate` in the sample app subscribes to the `licenseChangedNotification` and locks or unlocks the main app accordingly, like this:

    @NSApplicationMain
    class AppDelegate: NSObject, NSApplicationDelegate {
        func applicationDidFinishLaunching(_ aNotification: Notification) {
            observeLicenseChanges()
            // Unlocking upon app launch, either by reading from UserDefaults
            // and processing the value directly, or by going 
            // through `RegisterApplication`, which will trigger the 
            // callback for you.
        }        
        
        private func observeLicenseChanges() {
            NotificationCenter.default.addObserver(
                self,
                selector: #selector(AppDelegate.licenseDidChange(_:)),
                name: Licensing.licenseChangedNotification,
                object: nil)
        }
        
        @objc func licenseDidChange(_ notification: Notification) {
            guard let userInfo = notification.userInfo,
                let licensing = Licensing.fromUserInfo(userInfo)
                else { return }
        
            switch licensing {
            case .registered(_):
                unlockApp()
            
            case .unregistered:
                // If you support un-registering, or use this callback 
                // to figure out the initial state, lock the app again here:
                lockApp()
            }
        }
        
        private func lockApp() { ... }
        private func unlockApp() { ... }
    }

Now that's a demonstration of a monolithic license-based lock. You could also lock certain features, and have specific components lock/unlock themselves based on license change events. That's a good idea if your `AppDelegate` grows unwieldy already. Keep this in mind if you think about implementing in-app purchases of any kind. That amounts to the same: features are locked/unlocked separately.

In the sample app, I added code to read license information from `UserDefaults` and set up the initial state accordingly. In most of the apps I shipped so far, I transitioned to a different approach. During the app launch sequence, I make the existing services send a `licenseChangedNotification`, too. So the app launch and a user-initiated change event are treated the same. The loose coupling helps with that since the notification subscriptions have to be written anyway, and I don't need to establish a new route just for the launch sequence. I start with locked components at first, and since the app launch triggers a synchronous notification dispatch on the main thread, the components will unlock instantly. There's no visible flicker or anything.

I suggest you strive for the same: unify the locking and unlocking wherever possible.

For the sake of experimenting and learning how to treat the events, I found it immensely useful to have two different entry points to feature unlocking at first, though. There's not much to learn, so once you get the hang of it and know that things work as expected, you can easily unify the processes.

With the `AppDelegate` responding to license change events, and the view controller--event handler architecture from above, we can now display the license info UI, register the app, and unlock features without tight coupling.

In fact, you can put the exact code from the sample into your own application, change a few parameters, and then write appropriate locking and unlocking logic. That's all there is in terms of the most basic copy protection.
