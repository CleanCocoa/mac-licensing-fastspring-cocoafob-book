{pagebreak}

## App Activation Links in Your Order Confirmation via E-Mail {#activationlink}

The embedded store integration I have shown you takes care of automatically activating an application.

But you can take it a step further, still, and provide an activation link in a custom order confirmation mail. Users will be able to activate the application with a single click using custom URL schemes.

### Pick a URL scheme

![](images/90-700-urlscheme-form.png)

To make a link into the app work, register a custom URL Scheme. You find the settings under your app target's settings at "Info".

You can leave the identifier blank. I use `mynewapp` as the scheme, so we're going to use `mynewapp://` as the protocol later on.

A URL is composed of multiple parts. We may easily recognize the host, path, and query. There are various options to set up the URL handler. The most basic expected URL would be something along the lines of:

{linenos=off,lang="text"}
    mynewapp://activate/...
    mynewapp://activate?licenseCode=...
    mynewapp://license/activate?licenseCode=...

Substitute `...` with the actual code.

I favor the last option, `mynewapp://license/activate?licenseCode=...`, because there, you have the following components:

* `mynewapp` as `URL.scheme`
* `license` as `URL.host`
* `/activate` as `URL.path`
* `licenseCode=...` as `URL.query`

This can either be too complicated, or just a good fit. It's made up of parts that you may know from HTTP APIs. As URL schemes go, it does scale well, because you can easily add more "actions". Meanwhile, it can feel overly complicated if your app doesn't support any other URL scheme actions.

To make use of the URL namespace for extensions, consider:

- `://license/remove` where `URL.path` is "remove" and denotes another action on a license resource;
- `://settings/set` where resource and action are different.

I actually enjoy using secret settings in my own apps to help fix problems and offer customization to pro users without implementing an ever-growing preference pane.

We could stick with the very basic first form. CocoaFob license codes don't contain special characters. We're safe to assume they qualify as URL path components according to the specs. We need the licensee's name, too, though. That's why query parameters are better suited from a pragmatical point of view.

The following URL should activate the sample app for John Appleseed (newlines added for print only, but copy & paste into a browser should still work):

{linenos=off,lang="text"}
    mynewapp://activate?name=Sm9obiBBcHBsZXNlZWQ=
    &licenseCode=GAWQE-F9AVT-7EYL9-K8EWK-SLPLJ-RBYTQ-FSS76-CUH98
    -A9KCN-TQP93-ZPLPS-SGDYF-L2A39-NSVLA-NE799-A

The `name` parameter is base64-encoded so we don't run into problems with special characters, accents, whitespace, and what not. FastSpring supports that and I think this makes it easier to deal with data in URL query strings.

You can decode base64-encoded Strings with this little helper that we're going to use in a minute:

    extension String {
        init?(base64EncodedString string: String) {
            guard let decodedData = Data(base64Encoded: string, options: [])
                else { return nil }
            self.init(data: decodedData, encoding: .utf8)
        }
    }

In the app's code, I make the following changes:

* Add the `URLQueryRegistration` type as the entry point for the app to handle activation URL scheme events. Instances take a `URL`, extract the query portion, and delegate parsing to `URLQueryLicenseParser`. The result is passed on to an object which conforms to `HandlesRegistering` -- this will ultimately be the `RegisterApplication` service which we already use for manual registering.
* Add the `URLQueryLicenseParser` helper parses the query string, that is the part of a URL that begins right after the `?`. It then decodes the name and returns a by now well-known `(name: String, licenseCode: String)` license information tuple that will be used to register the app.
* Finally, implement URL scheme setup in `AppDelegate`.

### Decode license information from URL query parameters

First, let's specify the parts of the URL we're interested in as global constants:

    struct URLSchemeComponent: RawRepresentable {
        var rawValue: String
        init(rawValue: String) {
            self.rawValue = rawValue
        }

        static let host = URLSchemeComponent(rawValue: "activate")
        static let licensee = URLSchemeComponent(rawValue: "name")
        static let licenseCode = URLSchemeComponent(rawValue: "licenseCode")
    }

The service object that performs the registration and get from a URL to license information should feel pretty familiar to you by now. It's similar to the UI event handling code.

    class URLQueryRegistration {
        let registrationHandler: HandlesRegistering
    
        init(registrationHandler: HandlesRegistering) {
            self.registrationHandler = registrationHandler
        }
    
        lazy var queryParser = URLQueryLicenseParser()
    
        func register(fromURL url: URL) {
            guard let query = query(fromURL: url),
                let licenseInfo = queryParser.parse(query: query)
                else { return }
        
            registrationHandler.register(
                name: licenseInfo.name, 
                licenseCode: licenseInfo.licenseCode)
        }
        
        private func query(fromURL url: URL) -> String? {
            guard let host = url.host,
                host == URLSchemeComponent.host.rawValue
                let query = url.query,
                else { return nil }
                
            return query
        }
    }

The flow of events in `register(fromURL:)` is similar to manual registration in the user interface. Here, `query(fromURL:)` effectively filters for the proper URL scheme event that is identified by the host URL component, then returns the query part that is supposed to encode the license information. The query string is passed to the parser for extraction of name and license code, if possible; and the result is then used to attempt a registration.

The `URLQueryLicenseParser` needs to verify the integrity of query keys and values and thus turns out a bit longer than you might expect. The code is still so simple it's boring, sorry, but here you are:

    class URLQueryLicenseParser {
        init() { }

        func parse(query: String) 
            -> (name: String, licenseCode: String)? 
        {
            let queryDictionary = dictionary(fromQuery: query)
            guard let encodedName = queryDictionary[.licensee],
                let name = String(base64EncodedString: encodedName),
                let licenseCode = queryDictionary[.licenseCode]
                else { return nil }
            return (name, licenseCode)
        }

        fileprivate func dictionary(
                fromQuery query: String) 
                -> [URLSchemeComponent : String] {
            let parameters = query.components(separatedBy: "&")
            return parameters.mapDictionary() { param in
                guard let queryKey = self.queryKey(fromParameter: param),
                    let queryValue = self.queryValue(fromParameter: param)
                    else { return nil }
                return (queryKey, queryValue)
            }
        }

        fileprivate func queryKey(
                fromParameter parameter: String) 
                -> URLSchemeComponent? {
            // Of the `key=value` parameter string, take the `key` only:
            return parameter
                .components(separatedBy: "=")
                .first
                .map(URLSchemeComponent.init(rawValue:))
        }

        fileprivate func queryValue(
                fromParameter parameter: String) 
                -> String? {
            return unescape(queryValue: 
                escapedQueryValue(fromParameter: parameter))
        }

        fileprivate func unescape(queryValue: String) -> String? {
            return queryValue
                .replacingOccurrences(of: "+", with: " ")
                .removingPercentEncoding
        }

        fileprivate func escapedQueryValue(
                fromParameter parameter: String) 
                -> String {
            // Queries are of the form `key=value`, and we want to drop the `key=` part.
            // But base64-encoded Strings often end with `=`, so we also want to
            // keep all the other equals signs by joining things back.
            return parameter.components(separatedBy: "=")
                .dropFirst()
                .joined(separator: "=")
        }
    }

And here's a breakdown of what's happening:

- The `dictionary(fromQuery:)` helper transforms the whole query string of `key=value` information into a dictionary of `[URLSchemeComponent : String]`.
- `queryKey(fromParameter:)` and `queryValue(fromParameter:)` do the grunt work to create the dictionary here. I call each `key=value` part of the query a "parameter" here for lack of a better word.
- Values are assumed to be base64-encoded, and they are decoded into plain UTF-8 strings in the remaining private methods.
- If the result contains both `URLSchemeComponent`s for licensee name and license key, the resulting license information is returned by the parser.

All of this could be implemented in a free function, since the parser has no data of its own. But then testing would get harder again, so we stick to objects.

### Handle activation within the app

Finally, let's have a look at the handling of incoming URL events and implement the handing-off of the real work to `URLQueryRegistration` within `AppDelegate`.

Incoming URL request handlers are implemented by setting an "event handler" on `NSAppleEventManager`. To make this work, you surprisingly don't have to conform to any protocol. Instead, your event handler method has to match a the method signature of `(NSAppleEventDescriptor, NSAppleEventDescriptor) -> Void`.

Registration of the URL scheme event handler should happen during `NSApplicationDelegate.applicationWillFinishLaunching` -- note it's "_will_ finish launching", not "did finish launching". This is important because your app can be launched by the OS for URL-based events. If you don't register the URL handler as early as possible, the app will still launch but not process the request. That's effectively a bug.

    @NSApplicationMain
    class AppDelegate: NSObject, NSApplicationDelegate {
        func applicationWillFinishLaunching(_ notification: Notification) {
            registerForURLScheme()
        }
        
        func applicationDidFinishLaunching(_ aNotification: Notification) {
            // Remains unchanged ...
        }
        
        func registerForURLScheme() {
            NSAppleEventManager.shared()
                .setEventHandler(
                    self,
                    andSelector: #selector(
                        AppDelegate.handle(event:replyEvent:)),
                    forEventClass: AEEventClass(kInternetEventClass),
                    andEventID: AEEventID(kAEGetURL))
        }

        @objc func handleURL(
                event: NSAppleEventDescriptor, 
                replyEvent: NSAppleEventDescriptor) {
            guard let urlString = event.paramDescriptor(
                    forKeyword: AEKeyword(keyDirectObject))?.stringValue,
                 let url = URL(string: urlString)
                 else { return }
            
             // If you support multiple actions, here'd be the place to
             // delegate to a router object instead.

             URLQueryRegistration(registrationHandler: registerApplication)
                 .register(fromURL: url)
         }
         
         // ...
    }

Well, I find `NSAppleEventManager`-related code really messy. The so-called "keywords" used by `NSAppleEventDescriptor` are global constants which don't adhere to any naming convention Apple uses anywhere else in Swift. Even lots of Core Animation constants have Swift counterparts, but this apparently doesn't. The event manager's parameter values are sometimes prefixed with `AE`, for example during registration, but sometimes not, for example `keyDirectObject`. Go figure.

In the applications I ship, I put the whole event handling in another object to keep the `AppDelegate` simple. Since the `AppDelegate` provides callbacks for the app's main control flow, it's a good place to start experimenting with a feature like URL scheme-based event handler. You should eventually extract the implementation into another service object, though.

With the project registering the URL scheme, and the `AppDelegate` responding to and then forwarding incoming events, all that's missing is to send links to customers!

### Send the activation link with the automatic order confirmation e-mail in FastSpring

If you followed along during the FastSpring setup steps, your product has a fulfillment action that sends the license information to your customers already. You can [add the email now](#email) if you haven't already.

The activation link uses the new URL scheme of your app and query parameters for the licensee's name and the license code. The basic form is this: `mynewapp://activate?name=NAME&licenseCode=CODE`. We'll use proper email template variables instead of the placeholders in a second.

Recall that all license information is stored inside the `orderItem.fulfillment` variable group. If the user bought a dozen licenses, all will be printed in the email as a list.

For the activation link, we'll only use the first generated license. One way to got to it is via the `orderItem.fulfillment.license.outcome.licenses[0]` variable. To deal with unicode characters and spaces in names, the licensee's name is encoded using the `util.string.base64()` function.

Set the the e-mail body to something along these lines to get an activation link:

{linenos=off,lang="text"}
    #{order.customer.fullName},
    
    Thanks so for buying #{orderItem.display}!
    
    Here you find your license information for later reference:
    
    License Name: #{orderItem.fulfillment.license.licenseName}
    License Key: #{orderItem.fulfillment.license.licenses.list}
    
    To activate the app automatically, run it and simply click 
    this link: 
    mynewapp://activate?name=#{util.string.base64(orderItem.fulfillment.license.outcome.licenseName)}&licenseCode=#{orderItem.fulfillment.license.outcome.licenses[0]}
    
    Thanks again for your support. Please drop me a line if you have any questions.
    
    -- <<Your Name Here>>

The code doesn't fit the constraints of a book page, so the line wrapping is a bit off here. You can find a plain text template on the book website and in the code repository below the "FastSpring assets" directory to copy & paste into the form.

Save the email fulfillment. If you have any purchase stored in the system, either a real purchase or a test purchase, you can preview the email based on data from your order history immediately. If you haven't, complete a test purchase from the FastSpring backend first with the faux credit card information that we discussed [earlier](#checkout-test). Try the preview and see if the link looks alright.

Run your application with the URL scheme registration code at least once for macOS to know that your app is able to handle the URL scheme event. Then see what happens when you click the link: your app should come to front and change registration details appropriately.
