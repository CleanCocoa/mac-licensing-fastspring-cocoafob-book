{pagebreak}

## App Activation Link in Your Order Confirmation via E-Mail {#activationlink}

The embedded store integration I have shown you takes care of automatically activating an application.

But you can take it a step further, still, and provide an activation link in a custom order confirmation mail. Users will be able to activate the application with a single click using custom URL schemes.

### Pick a URL scheme

![](images/90-200-urlscheme-form.png)

To make a link into the app work, register a custom URL Scheme. You find the settings under your app target's settings at "Info".

You can leave the identifier blank. I use `mynewapp` as the scheme, so we're going to use `mynewapp://` as the protocol later on.

A URL is composed of multiple parts. We may easily recognize the host, path, and query. There are various options to set up the URL handler. The most basic expected URL would be something along the lines of:

{linenos=off,lang="text"}
    mynewapp://activate/...
    mynewapp://activate?licenseCode=...
    mynewapp://license/activate?licenseCode=...

Substitute `...` with the actual code. I favor the third option, because there, you have the following components:

* `mynewapp` as `URL.scheme`
* `license` as `URL.host`
* `/activate` as `URL.path`
* `licenseCode=...` as `URL.query`

Although that's the variant which stays truest to thinking in terms of HTTP resources, it's overly complicated if your app doesn't support anything else.

We could stick with the very basic first form. CocoaFob license codes don't contain special characters. We're safe to assume they qualify as URL path components according to the specs. We need the licensee's name, too, though. That's why query parameters are better suited from a pragmatical point of view.

The following URL should activate the sample app for John Appleseed (newlines added for print only, but copy & paste into a browser should still work):

{linenos=off,lang="text"}
    mynewapp://activate?name=Sm9obiBBcHBsZXNlZWQ=
    &licenseCode=GAWQE-F9AVT-7EYL9-K8EWK-SLPLJ-RBYTQ-FSS76-CUH98
    -A9KCN-TQP93-ZPLPS-SGDYF-L2A39-NSVLA-NE799-A

The name parameter is base64-encoded so we don't run into problems with special characters, accents, whitespace, and what not. FastSpring supports that and I think this makes it easier to deal with data in URL query strings.

### Handle activation within the app

In the code, I make the following changes:

* Add `URLQueryRegistration` type. Instances take a `URL` (former `NSURL`), extract the query portion, and delegate parsing to `URLQueryLicenseParser`. The result is passed on to an object which conforms to `HandlesRegistering`. This will be the `RegisterApplication` service which we already use for manual registering.
* `URLQueryLicenseParser` splits the whole query string which begins right after the `?` in the URL into key--value-pairs suited for a dictionary. It then decodes the name and returns a well-known `License` value object.
* Add URL scheme registration and handling of the event to `AppDelegate`.

The code to get from URL to license is nothing special.

    enum URLComponents: String {
        case host = "activate"
        case licensee = "name"
        case licenseCode = "licenseCode"
    }
    
    public class URLQueryRegistration {
    
        let registrationHandler: HandlesRegistering
    
        public init(registrationHandler: HandlesRegistering) {
            self.registrationHandler = registrationHandler
        }
    
        public lazy var queryParser: URLQueryLicenseParser 
            = URLQueryLicenseParser()
    
        public func register(fromUrl url: URL) {
            guard let query = query(url: url),
                let license = queryParser.parse(query: query) else {
                return
            }
        
            registrationHandler.register(
                name: license.name, 
                licenseCode: license.licenseCode)
        }
    
        fileprivate func query(url: URL) -> String? {
        
            if let host = url.host, 
                let query = url.query, 
                host == URLComponents.host {
                return query
            }
        
            return .none
        }
    }

The `URLQueryLicenseParser` is a bit longer because you have to extract parts of the string and escape and unescape stuff here and there. It's still boring. Instead of printing all the code here, I suggest you take a look at the demo code directly and play with it. Or have a look [at the code online.](https://github.com/CleanCocoa/mac-licensing-fastspring-cocoafob/blob/master/Trial-Expire-While-Running/MyNewApp/URLQueryLicenseParser.swift)

Let's have a look at the lower-level handling of incoming URL requests and then handing off the real work to `URLQueryRegistration` in `AppDelegate`:

    func applicationDidFinishLaunching(_ aNotification: Notification) {
        prepareTrialOnFirstLaunch()
        startTrialTimer()
    
        registerForURLScheme() // <- New!
        observeLicenseChanges()
        prepareLicenseWindowController()
        launchAppOrShowLicenseWindow()
    }
    
    func registerForURLScheme() {
    
        NSAppleEventManager.shared()
            .setEventHandler(
                self,
                andSelector: #selector(AppDelegate
                    .handle(getUrlEvent:withReplyEvent:)),
                forEventClass: AEEventClass(kInternetEventClass),
                andEventID: AEEventID(kAEGetURL))
    }

    func handle(getUrlEvent event: NSAppleEventDescriptor, 
        withReplyEvent: NSAppleEventDescriptor) {
    
        if let urlString = event.paramDescriptor(
            forKeyword: AEKeyword(keyDirectObject))?.stringValue,
            let url = URL(string: urlString) {
        
            // If you support multiple actions, here'd be the place to
            // delegate to a router object instead.
        
            URLQueryRegistration(registrationHandler: registerApplication)
                .register(fromUrl: url)
        }
    }

I find `NSAppleEventManager`-related code to look quite messy. The so-called "keywords" used by `NSAppleEventDescriptor` are global constants which don't adhere to any naming convention Apple uses otherwise, like enums. The event manager's parameter values are sometimes prefixed with `AE`, sometimes not.

Because there's no real application and thus no real infrastructure set up in the sample projects, I put this into `AppDelegate`, too. In a shipping application, you should put event handling someplace else. Registering the handler in `AppDelegate` can work just fine, though.

Now we need FastSpring to generate the links.

### Send the activation link with the automatic order confirmation e-mail

If you followed along, your product has a fulfillment action that sends the license information to your customers already. You can [add the email now](#email) if you haven't already.

The activation link uses the new URL scheme of your app and query parameters for the licensee's name and the license code. The basic form is this: `mynewapp://activate?name=NAME&licenseCode=CODE`. We'll use proper email template variables instead of the placeholders in a second.

Recall that all license information is stored inside the `orderItem.fulfillment` variable group. If the user bought a dozen licenses, all will be printed in the email as a list.

For the activation link, we'll only use the first generated license. One way to got to it is via the `orderItem.fulfillment.license.outcome.licenses[0]` variable. To deal with unicode characters and spaces in names, the licensee's name is encoded using the `util.string.base64()` function.

Set the the e-mail body to something along these lines to get an activation link:

{linenos=off,lang="text"}
    #{order.customer.fullName},
    
    Thanks so for buying #{orderItem.display}!
    
    Here you find your license information for later reference:
    
    License Name: #{orderItem.fulfillment.license.licenseName}
    License Key: #{orderItem.fulfillment.license.licenses.list}
    
    To activate the app automatically, run it and simply click this link: mynewapp://activate?name=#{util.string.base64(orderItem.fulfillment.license.outcome.licenseName)}&licenseCode=#{orderItem.fulfillment.license.outcome.licenses[0]}
    
    Thanks again for your support. Please drop me a line if you have any questions.
    
    -- <<Your Name Here>>

(Since long lines cannot be properly preserved in print, you can find a plain text template on the website and in the code repository below "FastSpring assets" to copy & paste into the form.)

Save the email fulfillment. If you have a real or test purchase stored in the system, you can preview the email and see what happens when you click the link!
