## Configure License Code Generation via CocoaFob

![Choose CocoaFob-based license generation from the fulfillment options](images/10-101-generate-license.png)

In case you haven't followed the fulfillment details so far, click on the "Add Fulfillment Action" button in the top group of your app product listing screen. There, pick "Generate a License", and then choose "CocoaFob" from the list of license generators.[^objcfob] Hit the "Next" button to set up the generator.

[^objcfob]: Yeah, I know the description text still says "Objective-C", but it really is more versatile than that. I personally take care of the Swift port to work as expected, since I rely on the library in my own apps, too. Skin in the game.

In the setup form, pick a "Product Name" for CocoaFob to use for the license generator when encoding the license details into a license code. This could be the same as the product path in FastSpring, e.g. "my-new-app", a numeric product identifier, or any other unique string. 

![The license generation setup form](images/10-102-license-form.png)

You will be using the same string in your app later to decode a license code and then verify its contents. For example, if I decode a license in my Mac app TableFlip and the resulting product name turns out to be "duke-nukem-forever" or something, I don't want the license to pass even though I was able to decode it successfully. Don't worry, though, this example is totally made up. In practice, a mixup like this shouldn't be possible because the keys used during license code creation will be different for each app and the decoding step should fail. You cannot unlock app A with a code for app B since the apps supposedly use different keys during the encoding step.

What is a good product name for a license code generator and it's counterpart, the license code verifier in your app? After all, you set up all this to prevent software piracy to some extent. Thinking about potential hackers of your verification code, they might indeed an easier time scanning app for a string that corresponds to the app's name, like "`mynewapp`". A random product name like "`/g}eJ3U8bG29r+wfcZ;`" will be much harder to guess, and then locate in a hex dump of the application binary. I think this is a bit overkill, though. The potential security upside is negligible: if someone has the means to perform these kinds of actions to crack your code, you likely won't hinder them much by obfuscating the CocoaFob product name string. As mortal human beings, we app developers prefer sensible strings naturally, and I think it's okay to roll with this impulse. It's much easier to detect the typos in "mnyweapp" than it is in a nonsensical string of random characters.

But please, do consider both approaches carefully. The obfuscation may appeal to you for good reason. Then again, with every action you take on the copy protection front, you also send a message to yourself and reinforce your beliefs. Do you want this message to say "I am very freaked out about my things being stolen" and "the world is dangerous", or rather one along the lines of "people should be incentivized to pay for quality products" and "the world deserves an app as good as mine" and stop there? -- I personally want to spread my stuff. But I cannot afford to do it for free, or I'll starve. I'm not worried about piracy. Folks who really use my apps professionally will pay anyway. It seems people are inclined to hunt for paid apps and sustainable businesses instead of free apps because they are worried about the continued development and support of tools they rely on. This is true for professionals looking for better tools; less so for gamers, I would think. I also don't create freeware applications most of the time and try to charge even a small amount not because I'm greedy, but because one of my core beliefs is that nobody can afford not to pay for professional app development in the long run. At least not in the world we inhabit, where you need to work to make money to survive. This is just another opportunity to do some soul-searching, get clarity about what you value, and be honest with yourself.

With a product name set, the "DSA Private Key" finally comes next. 
