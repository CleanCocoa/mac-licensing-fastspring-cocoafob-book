## Obtain and Work with Current Time

For the sample app, I want to work with a trial duration of 5 days. Not because I think that's the best duration you could use, but because it keeps date calculations pretty simple. To create a `TrialPeriod` in the app, we need the current time as `startDate`, and then add the duration to calculate `endDate`. 

In Foundation, the current time can be obtained by creating a `Date` object with the default initializer. But that's going to bite us during tests, where we want to have constant inputs and outputs, not dynamically changing values.

The go-to solution when you express your concepts as objects is to introduce a representation of a thing that tells the time. In other words, a clock:

    protocol Clock {
        func now() -> Date
    }

To get a real clock, we can rely on the default parameterless initializer of `Date`:

    class SystemClock: Clock {
        init() { }
    
        func now() -> Date {
            return Date()
        }
    }


And we can provide a clock substitute that always tells the same date and time. We will use that both in manual tests to rewind time and see how the trial-based functionality reacts, and in unit tests.

    class StaticClock: Clock {
        let date: Date
    
        init(date: Date) {
            self.date = date
        }
    
        func now() -> Date {
            return date
        }
    }

With this, we can add a convenience initializer to `TrialPeriod` that takes a `Clock` to tell the current time, then adds the trial duration to compute the expiration date. I also want to introduce a type that expresses the duration of a day in terms of the app, and call it `Days`. With daylight savings time and leap seconds and what not affecting the length of a calendar day, the following is not a good representation for accurate calculations in calendar app -- but it's good enough to express how long a trial should be. And, as you will see in the code, you can attach all sorts of useful behavior to it that a mere `Int` would not be suited to.

    struct Days {
        let amount: Double
        
        init(_ anAmount: Double) {
            self.amount = anAmount
        }
        
        // Compatible with Date calculations
        var timeInterval: TimeInterval {
            return self.amount * 60 * 60 * 24
        }
    }
    
    extension TrialPeriod {
        public init(numberOfDays duration: Days, clock: KnowsTimeAndDate) {
            let startDate = clock.now()
            let endDate = startDate.addingTimeInterval(duration.timeInterval)
            self.init(startDate: startDate, endDate: endDate)
        }
    }

It's very easy now to verify that `TrialPeriod(numberOfDays:clock:)` actually adds the appropriate time interval to the current time in tests:

    class TrialPeriodTests: XCTestCase {
        class TestClock: Clock {
            var testDate: Date!
            func now() -> Date {
                return testDate
            }
        }
    
        func testCreation_WithClock_AddsDaysToCurrentTime() {
        
            let date = Date(timeIntervalSinceReferenceDate: 9999)
            let clockDouble = TestClock()
            clockDouble.testDate = date
            let duration = Days(10)
        
            let trialPeriod = TrialPeriod(numberOfDays: duration, clock: clockDouble)
        
            let expectedDate = date.addingTimeInterval(duration.timeInterval)
            XCTAssertEqual(trialPeriod.startDate, date)
            XCTAssertEqual(trialPeriod.endDate,   expectedDate)
        }
    }

You see how easy it is to work with a `Clock` object to produce `Date` objects and provide test doubles. We can put additional behavior and logic in `TrialPeriod` to encapsulate trial expiration logic using clocks, too:

    extension TrialPeriod {
        // Important piece of logic to tell if the trial is
        // still valid.
        func isExpired(clock: Clock) -> Bool {
            let now = clock.now()
            return endDate < now
        }
    
        // Convenient factory of remaining days, useful to
        // display the information in the app.
        func daysLeft(clock: Clock) -> Days {
            let now = clock.now()
            let remainingTime = now.timeIntervalSince(endDate)
            return Days(timeInterval: remainingTime)
        }
    }
    
    extension Days {
        init(timeInterval: TimeInterval) {
            self.init(fabs(timeInterval / 60 / 60 / 24))
        }
    }

As you can see, we do not interface with Foundation's `Date` directly but acquire dates exclusively through `Clock` objects. A parameterless `daysLeft` computed property would read nicer, but the method signature `daysLeft(clock:)` works really well in practice, too, once you get used to it. The upside of making the code testable is immense. Both `daysLeft(clock:)` and `isExpired(clock:)` would be a pain to test if you called `Date.init()` directly.

The main lesson we encounter with Dependency Injection of this kind is this: try not to create objects in your code, because their creation is hard to test, and instead defer object creation to dedicated service objects, like the Factory that `Clock` really is. This is especially important when it comes to types you do not own, like `Date` and similar Foundation types. It pays off to not worry about the unknown implementation details and introduction of subtle bugs because some of your assumptions turn out to be wrong.
