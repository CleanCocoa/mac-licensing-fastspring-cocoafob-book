## Generating Keys for License Code Generation and Verification

CocoaFob licensing works with pairs of private--public keys much like you use for encryption of files and e-mail, for example.

Your app will ship with the public key embedded in the app bundle. Customers will buy your application via FastSpring, where the private key is used to generate a new license code.

The license information is encrypted on FastSpring's server. Your app will decode the information from the license code the customer receives. With the decrypted data, it can start the verification process.

FastSpring will take care of all the license code generation during the checkout process. This is part of the "order fulfillment".

First, we need the private key to complete the form. 

Switch to your favorite terminal emulator (or use the default Terminal.app of Mac OS X) to create this key.

### Generating Keys in the Terminal

We're going to generate a private key and extract a public key from it using OpenSSL. I encourage you to do this for your app according to this guide and keep the results tucked away somewhere safe. I'll provide the keys used for the awesome "New App" app both here in the book and in the sample code package.

<!--ct: TODO check: is this a warning box?-->

W> You should not, under no circumstances, re-use the keys printed in this book. That'd be as good as having no licensing protection at all because everyone would be able to generate license codes with these SSL keys themselves.

First, generate some DSA parameters:

    openssl dsaparam -out dsaparam.pem 512

The result for the sample app is this:

    -----BEGIN DSA PARAMETERS-----
    MIGcAkEAoKLaPXkgAPng5YtVG14BUE1I5QaGesaf9PTCnmUlYMp4m7MrVC2/YybX
    EQlaILBZBmyw+A4Kps2k/T12qL8EUwIVAPxEzzlcqbEDKaw6oJ9THk1i4LuTAkAG
    RPr6HheNNnH9GQZGjCuv6pLUOBo64QJ0WNEs2c9QOSBUHpWZUm8bGMQevt38PiSZ
    ZwU0hCAJ6pd09eeTP983
    -----END DSA PARAMETERS-----

Second, generate a DSA private key:

    openssl gendsa -out privkey.pem dsaparam.pem

The private key will be stored at FastSpring for license code generation.

Again, the resulting contents:

    -----BEGIN DSA PRIVATE KEY-----
    MIH4AgEAAkEAoKLaPXkgAPng5YtVG14BUE1I5QaGesaf9PTCnmUlYMp4m7MrVC2/
    YybXEQlaILBZBmyw+A4Kps2k/T12qL8EUwIVAPxEzzlcqbEDKaw6oJ9THk1i4LuT
    AkAGRPr6HheNNnH9GQZGjCuv6pLUOBo64QJ0WNEs2c9QOSBUHpWZUm8bGMQevt38
    PiSZZwU0hCAJ6pd09eeTP983AkB+yDfp+53KPSk5dHxhoBm6kTBKsYkxonpPlBrF
    JTJeyvZInHIKrd0N8Dui3XKDtqrLWPIQcM0mWOjYHUlfUpIgAhUA3+1tmyNHMc+1
    J5OHnK/HHpfy3KA=
    -----END DSA PRIVATE KEY-----

Put the private key into the "DSA Private Key" field to finish configuring CocoaFob.

Last, extract the public key from the private key:

    openssl dsa -in privkey.pem -pubout -out pubkey.pem

The public key is bundled with the app to verify license codes.

Which results in:

    -----BEGIN PUBLIC KEY-----
    MIHwMIGoBgcqhkjOOAQBMIGcAkEAoKLaPXkgAPng5YtVG14BUE1I5QaGesaf9PTC
    nmUlYMp4m7MrVC2/YybXEQlaILBZBmyw+A4Kps2k/T12qL8EUwIVAPxEzzlcqbED
    Kaw6oJ9THk1i4LuTAkAGRPr6HheNNnH9GQZGjCuv6pLUOBo64QJ0WNEs2c9QOSBU
    HpWZUm8bGMQevt38PiSZZwU0hCAJ6pd09eeTP983A0MAAkB+yDfp+53KPSk5dHxh
    oBm6kTBKsYkxonpPlBrFJTJeyvZInHIKrd0N8Dui3XKDtqrLWPIQcM0mWOjYHUlf
    UpIg
    -----END PUBLIC KEY-----

Remember: Don't share the _private key_ with anyone. Make sure you don't lose it, either: it cannot be replicated.

### What if you lose one or both keys?

When you use your private key, generating a new private key will result in a mess: every existing license will be invalid when checked with a new key.

Your app will bundle with the public key. As long as you don't lose it's source code, you'll be able to ship updates to existing customers. You will not be able to create new licenses if, say, you delete the old one at FastSpring and don't have a local copy.

License codes generated with a new private key won't match with the old public key.

At best, you can keep the existing code for checking licenses around if the old public key is still available in your source. You'll have to add a second instance with a new public key to support new customers, though.

Losing both keys is going to be a pretty hard blow for your business. This entails you lose the source code for your app, too, or at least the parts dedicated to licensing. You will need to migrate existing users to new license codes in that case. That's quite a hassle for both sides.

Now that you know just how important it is to secure these codes, do everything in your power to keep them safe and cozy.


### Picking a license code generator template

When you hit "Save" in the *Actions* sidebar (I have no clue why there's no button at the bottom, honestly), your order fulfillment is complete. You can customize it further to your liking.

The "License Source Template" or simply "license template" is interesting. You may want to carefully pick what should be used to generate the license.

![CocoaFob configuration finished](images/10-103-license-form-filled.png)

I picked a license template of `#{product},#{name}` so that each license code is unique per product and licensee. To unlock the app, users have to provide both the license code and the licensee's name.

I prefer personalized license codes. You could also utilize them to check how often a given license is used and deactivate illegally shared licenses if you're into that kind of thing.

It's important that you don't change the CocoaFob product name if you include `#{product}` in the license template. If you change the template or the template's variables' contents, you have to change the license verification code in your app, so new licenses won't be compatible to old ones and vice versa.

More recently, I've come to take a simpler template into consideration, omitting the licensee's name, because using a template of `#{product}` only is useful to allow bulk-generating licenses. If you ever want to participate in a bundle sale, this can make things a lot easier as some bundle organizers simply deliver a non-personalized license code from a long list you provide.

To support non-personalized license codes next to your standard personalized license code verification, you'd have to supply a second algorithm (or object) in code which doesn't take the licensee's name into account, even though the form can look the same, of course.

I was lucky to participate in a bundle which we sold via FastSpring, so I could simply duplicate my product settings. See [the bonus content](#sellbundles) at the end of the book for details about bundle setup. 

Now all the product-related stuff is done. Let's look at the app side.
 