### Generate DSA keys for both the CocoaFob license code generation and verification

The CocoaFob library works via public-key cryptography. A private key produces the license code, a public key decrypts the message and is shared publicly via your app. This is similar to how popular peer-to-peer email cryptography works.

CocoaFob's license generator takes a string and encodes it with a with a private key. The result is randomized so that running the algorithm on the same string multiple times produces different results. The input string is, for example, the app name. The result is the license code.

License code verification works by taking the license code, decrypting it with a public key that matches the private key from the code generator.

Note that your app will ship with the public key embedded in the app bundle, not the private key. The public key is used for the verification process, but itself is unable to generate valid license codes. People with malicious intent cannot generate their own license codes using the public key. When customers buy your application via FastSpring, FastSpring uses the private key internally in the CocoaFob license generator to create a license code.

W> Since you'll be uploading your private key to FastSpring, it won't be _private_ anymore. Any of FastSpring's security problems thus become yours. Make sure you don't use this key for anything else in your life, ever. Create a new pair of keys for the purpose of licensing _this one particular app_ only. Create new key pairs for every app you develop. Consequently, don't just use existing private keys, like your SSH private key, your email private key, or any other you happen to have lying around. Do spend the 3 minutes it takes to generate new key pairs and store them somewhere safe as detailed below.[^ortiz2]

First, we are going to need the private key to complete the FastSpring setup. 

[^ortiz2]: Again, thanks to Jorge D. Ortiz Fuentes for the heads up and for clarifying the implications.

Switch to your favorite terminal emulator, e.g. Terminal.app, to create the private key first and then extract a related public key from it. 

We're going to generate a private key and extract a public key from it using OpenSSL. I encourage you to do this for your app according to this guide and keep the results tucked away somewhere safe. I'll provide the keys used for the awesome "My New App" app both here in the book and in the sample code package.

W> You should not, under no circumstances, re-use the keys printed in this book. That'd be as good as having no licensing protection at all because everyone would be able to generate license codes for your app with these publicly available keys.

First, generate some DSA parameters used for the key generator. Type the following in your terminal, omitting the leading `$`. By convention the dollar sign denotes the beginning of a new line in the terminal prompt. This is used to print both what you're supposed to type and the resulting output, for example.

{linenos=off,lang="text"}
    $ openssl dsaparam -out dsaparam.pem 512

The resulting `dsaparam.pem` from a run for the sample app is this:

{linenos=off,lang="text"}
    -----BEGIN DSA PARAMETERS-----
    MIGcAkEAoKLaPXkgAPng5YtVG14BUE1I5QaGesaf9PTCnmUlYMp4m7MrVC2/YybX
    EQlaILBZBmyw+A4Kps2k/T12qL8EUwIVAPxEzzlcqbEDKaw6oJ9THk1i4LuTAkAG
    RPr6HheNNnH9GQZGjCuv6pLUOBo64QJ0WNEs2c9QOSBUHpWZUm8bGMQevt38PiSZ
    ZwU0hCAJ6pd09eeTP983
    -----END DSA PARAMETERS-----

Second, generate a DSA private key using the parameters:

{linenos=off,lang="text"}
    $ openssl gendsa -out privkey.pem dsaparam.pem

The contents of this file, `privkey.pem`, will be stored on FastSpring's servers during setup of the license code generator. In my case, the result was this:

{linenos=off,lang="text"}
    -----BEGIN DSA PRIVATE KEY-----
    MIH4AgEAAkEAoKLaPXkgAPng5YtVG14BUE1I5QaGesaf9PTCnmUlYMp4m7MrVC2/
    YybXEQlaILBZBmyw+A4Kps2k/T12qL8EUwIVAPxEzzlcqbEDKaw6oJ9THk1i4LuT
    AkAGRPr6HheNNnH9GQZGjCuv6pLUOBo64QJ0WNEs2c9QOSBUHpWZUm8bGMQevt38
    PiSZZwU0hCAJ6pd09eeTP983AkB+yDfp+53KPSk5dHxhoBm6kTBKsYkxonpPlBrF
    JTJeyvZInHIKrd0N8Dui3XKDtqrLWPIQcM0mWOjYHUlfUpIgAhUA3+1tmyNHMc+1
    J5OHnK/HHpfy3KA=
    -----END DSA PRIVATE KEY-----

You can open the file in a text editor to copy and paste the contents. If you want to put the file contents in your clipboard directly from the terminal, you can use the `cat` program to print the file contents, and direct the output to `pbcopy` (short for "pasteboard copy") like this:

{linenos=off,lang="text"}
    $ cat privkey.pem | pbcopy

Now that you have the contents in your clipboard, paste them in the text area on the CocoaFob license generator website under the "DSA Private Key" label. This completes the initial setup of CocoaFob.

While we're at it, create a public key from the private key. This will be useful later to configure the license code verifier in your app:

{linenos=off,lang="text"}
    $ openssl dsa -in privkey.pem -pubout -out pubkey.pem

My `pubkey.pem` file contains the following:

{linenos=off,lang="text"}
    -----BEGIN PUBLIC KEY-----
    MIHwMIGoBgcqhkjOOAQBMIGcAkEAoKLaPXkgAPng5YtVG14BUE1I5QaGesaf9PTC
    nmUlYMp4m7MrVC2/YybXEQlaILBZBmyw+A4Kps2k/T12qL8EUwIVAPxEzzlcqbED
    Kaw6oJ9THk1i4LuTAkAGRPr6HheNNnH9GQZGjCuv6pLUOBo64QJ0WNEs2c9QOSBU
    HpWZUm8bGMQevt38PiSZZwU0hCAJ6pd09eeTP983A0MAAkB+yDfp+53KPSk5dHxh
    oBm6kTBKsYkxonpPlBrFJTJeyvZInHIKrd0N8Dui3XKDtqrLWPIQcM0mWOjYHUlf
    UpIg
    -----END PUBLIC KEY-----

Once you have pasted the private key into the CocoaFob form field, you're all set. 

Before we continue with the customization options, I want to lay out just how important it is to handle the keys with care once you begin selling your app. In short, don't share the _private key_ with anyone. Give away the public key freely. And make sure you don't lose the private key, either. It cannot be replicated without consequences.

### What happens if you lose the private and/or public key?

![Multiple public keys can be created from a single private key](images/10-110-public-from-private-key.png)

In general, you can create multiple public keys from the same private key, but it doesn't work the other way around. You cannot replace the private key and keep the old public key intact. The encryption result of the new private key will be incompatible with the old public key. That means losing the public key is not much of a problem, but losing the private key forces you to replace it and update all public keys, because the old ones are incompatible.

Let's run through all possible scenarios.

What happens when you lose the public key? Your app includes the public key, and it's probably the only place you use it, so the worst that can happen is you lose whole code repository, including the public key. That's harsh, but you can survive this blow. It'll be a lot of work to re-create the app, sure, but you will be able to ship a new version with a new public key that is fully compatible to existing licenses. Existing customers will not run into issues with the new version. Both the old and new public key will continue to work as long as the license codes are generated with the same private key. When you lose the public key, you can always generate a new one from the private key with the command shown above.

When you lose your private key, you'll be in more trouble. To generate a new private key will render all existing public keys incompatible. You cannot decrypt the license codes made with the new private key using public keys that are based on the old, now missing private key. 

<!--ct: TODO experiment with on-page image positions-->

{id="10-111-single-key-license"}
![License codes, encrypted from a shared private key, can be decrypted by multiple public keys](images/10-111-single-key-license.png)

{id="10-112-incompatible"}
![New public keys derived from a new private key are incompatible with encrypted messages from the old private key](images/10-112-incompatible.png)

Once you replace the private key in the CocoaFob license generator, for example, and ship an update to your app with a new public key, existing customers will all be affected. None of the existing licenses will work anymore. Also, older versions of your app with the outdated key will not accept the new license code. If you don't mitigate the problem, it's a confusing situation, to say the least.

This is not the end of the world, though. If you still have the old public key in your app and only use the private key, you can continue to maintain compatibility with existing licenses. You can use both the old and new public key in one app: Just try to decrypt a user-entered license code with the new public key first, and if that fails, fallback to the old public key method and try again. 

Support both license code from old and new private keys in a single app and users will not notice a difference. It's a minor nuisance for you, but not for existing customers. And keeping existing customers happy is always better than being lazy, because disappointed customers are not going to recommend your product. If you reach out and force them to replace their license codes makes you less reliable in their eyes. It diminishes their trust in you and causes confusion. To reiterate: try to support old licenses for as long as humanly possible in the face of private key loss.

It's a different story if your private key is _compromised,_ for example if someone hacks into your FastSpring account, copies your private key from the CocoaFob generator settings, and uses it to create and share a license code generator, also known as a keygen. 

In case of a compromised private key, you will want to change your account password and stop support for the compromised key as soon as possible.  What to do with existing customers's licenses? How do you prevent the keygen to be effective and support license codes coming from you at the same time? This is a tough situation. The app's version that people already have installed on their machine is out of your control. Forget about it. They will continue to accept license codes based on the compromised private key, even those from the keygen.

I can only suggest damage reducing tactics here. You could gather all existing license codes that went through FastSpring and hard code them as accepted input into the app. This effectively adds a bypass of the public-key-based decryption through a whitelist of known license codes. Only license codes not in this whitelist will execute the actual public key decryption based on the new, uncompromised private key. None of the codes from the keygen tool will be on your whitelist, so you're protected from this piracy attempt. This, in turn, means you have to assemble a record of all valid license codes, i.e. all license codes that were generated by FastSpring. To achieve this, you will have to maintain a HTTP API endpoint and accept order completion callbacks by FastSpring's system, then store the relevant data in a secure database. Or you simply email the license details to yourself upon order completion, then scrape your email inbox for all known codes.

Compromised private keys are an annoying blow to your infrastructure. That's why you should keep them, well, _private._

Now when you lose _both_ private keys and public keys at the same time, that's a real problem. Say your computer dies, all app code is gone, and the universe conspires against you and makes it so that FastSpring's servers suffer from severe data loss at the same time. Only then will you absolutely have to reach out to existing customers. Since you don't have the public key anymore, you cannot ship a replacement app that accepts the same license codes. Since you don't have the private key anymore, you cannot continue to sell new licenses to the old app version. This situation is an immediate show-stopper. Remove the app from your store entirely, work on a replacement, and sell it as a paid upgrade. Thankfully it's very unlikely that a catastrophic event like this ever occurs. (In the case of nuclear warfare destroying all infrastructure of your business, we all have more severe things to worry about than your passive income streams drying up.)

Now that you know just how important it is to secure these codes, do everything in your power to keep them safe and cozy. In short, key loss should be avoided, but is not a death blow to your business. You can work around any of the problems one way or another.
