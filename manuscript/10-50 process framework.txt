## Licensing Is All About a Big State Change {#statechange}

The whole topic of protecting access to features of your application unless people pay for it can be boiled down to handling a transition of your app from "unactivated" state to "activated" state. 

If you want, you could have a global variable in your code called `appIsUnlocked` and set it to `true` upon activation. We'll be using a more sophisticated approach, but in the end, a single boolean value is a very good representation already.

To manage the state change in a clean way, and since it's a very important part to get right, it pays off to implement all this as expressively as possible. You don't want to guess when and why your app is locking and unlocking itself in two years from now. We'll try our best to avoid creating tomorrow's legacy code when we implement the activation process.

Think about a license code-activated application with a 30 day time-based trial. During the trial, users should have access to the full feature set. After the trial has ended, some or all features should be inaccessible unless the user enters a valid license code. In some sense, the activated app is identical to the app in trial mode, only without a clock ticking. How do you represent this?

The state the app is in is determined at least during app launch. Changes can happen during the app's runtime when the trial period is up or the user enters a license code. The app has to represent its current state and its transitions.

With Swift, it's trivial to represent the state of an app that has to be activated at first launch as an enum with an associated value for the details:

    enum Licensing {
        case registered(License)
        case unregistered
    }

It only gets a bit more complex if you want to support a time-based trial:

    enum Licensing {
        case registered(License)
        case trial(TrialPeriod)
        case trialExpired
    }

The associated `License` type is based on license code and licensee name for the sample apps of this book:

    struct License {
        let name: String
        let licenseCode: String
    }

And the `TrialPeriod` type can be equally simple:

    struct TrialPeriod {
        let startDate: Date
        let endDate: Date
    }

That's the foundation of everything we're going to do: to give the application a means to find out which state it's in at each moment, and to handle transitions. This is a first representation of the technical terms from the last section in code.

You could capture different details in your `License`, like a company name, an expiration date, or whatever else you like. For the sake of this book, we'll stick to the very common combination of license code and licensee name.

D> **Tyler Hall** researched the rates of piracy of his apps and found out 83% of the users of VirtualHostX were using a pirated copy. Piracy was strong for quite some time -- until he added server-side validation to unlock license codes. 
D> I remember how badly gamers reacted and still react when single-player computer games required an internet connection on first launch. That was a lot of years ago. Nowadays you can assume permanent connectivity for most of your customers. Doesn't mean they'll be happy about it, because once your server is gone for good, they cannot unlock the product anymore.
D> 
D> In his [blog post on piracy](https://tyler.io/experimenting-with-piracy/), Tyler listed a few other measures against software piracy that did lower the number a bit, too, although not by much. Bugging the user with a personalized guilt-laden information dialog converted about 5%. Giving pirates a one-time discount to convert to real customers worked for about 11%. Craig Scott of toketaWare talked about "good will discounts" to turn angry prospects into happy customers when you surprise them with a discount. It seems to work with people who want to use your app for longer than just the trial period, too. The deal has to be good from their point of view.

Here's a rehash of the battle plan for the next chapters in case you missed it  in the intro:

We will start with setting up the app in your FastSpring dashboard. Then we'll implement a simple license check in the app's startup routine which determines if the app is allowed to run, or if the user only sees the dialog to enter license details. In the final chapter, we're going to add a trial mode to enable users to test drive our software before they decide to buy.
